# -*-coding=utf-8-*-
__author__ = 'aqua'

import download
import hcdata
import hitTopTest2
import datetime as dt
from datetime import timedelta
"""
   This is for test
"""

if __name__ == '__main__':
   # code_pre_close_map = [('000760','3.58')]
   # date = '20180919'

   code_pre_close_map = [('000005', '2.6'), ('000018', '1.79'), ('000155', '3.41'), ('000166', '3.97'), ('000403', '19.9'), ('000416', '3.47'), ('000422', '2.55'), ('000509', '2.59'), ('000563', '2.43'), ('000585', '1.88'), ('000586', '6.76'), ('000616', '2.53'), ('000627', '5.33'), ('000633', '3.4'), ('000638', '3.95'), ('000655', '2.92'), ('000668', '7.43'), ('000669', '6.75'), ('000679', '3.15'), ('000685', '6.37'), ('000686', '5.29'), ('000691', '3.12'), ('000692', '2.28'), ('000697', '11.45'), ('000707', '2.32'), ('000712', '8.53'), ('000720', '2.89'), ('000728', '5.74'), ('000737', '2.44'), ('000750', '2.91'), ('000755', '3.48'), ('000776', '11.04'), ('000783', '4.23'), ('000816', '1.23'), ('000929', '5.4'), ('000939', '0.98'), ('000955', '3.65'), ('000968', '12.25'), ('000972', '2.21'), ('000987', '6.5'), ('000996', '7.27'), ('002011', '3.95'), ('002021', '2.5'), ('002052', '2.98'), ('002084', '3.56'), ('002089', '2.68'), ('002127', '6.28'), ('002188', '2.58'), ('002213', '6.55'), ('002217', '4.73'), ('002230', '21.38'), ('002262', '11.55'), ('002263', '1.11'), ('002271', '11.7'), ('002289', '4.78'), ('002413', '4.86'), ('002419', '11.04'), ('002437', '2.68'), ('002456', '12.46'), ('002463', '6.73'), ('002475', '16.12'), ('002494', '4.61'), ('002496', '1.72'), ('002500', '5.04'), ('002504', '2.39'), ('002507', '21.95'), ('002526', '1.93'), ('002552', '3.78'), ('002569', '9.38'), ('002600', '2.49'), ('002607', '7.13'), ('002655', '5.24'), ('002667', '5.66'), ('002670', '8.24'), ('002673', '7.23'), ('002684', '5.59'), ('002718', '23.41'), ('002726', '6.83'), ('002736', '6.95'), ('002737', '16.03'), ('002791', '9.12'), ('002797', '4.29'), ('002828', '11.78'), ('002832', '27.58'), ('002839', '4.88'), ('002865', '15.27'), ('002869', '15.74'), ('002913', '37.85'), ('002923', '28.36'), ('002926', '7.36'), ('002935', '41.25'), ('002937', '27.18'), ('300029', '4.43'), ('300033', '33.09'), ('300042', '15.28'), ('300059', '11.79'), ('300085', '8.29'), ('300091', '3.23'), ('300107', '11.56'), ('300146', '18.54'), ('300189', '2.31'), ('300203', '19.73'), ('300296', '7.68'), ('300309', '7.55'), ('300325', '2.55'), ('300384', '26.41'), ('300398', '14.58'), ('300404', '11.38'), ('300514', '12.28'), ('300515', '8.04'), ('300532', '9.2'), ('300538', '24.42'), ('300541', '12.33'), ('300551', '11.25'), ('300581', '11.45'), ('300604', '30.67'), ('300642', '40.32'), ('300653', '43.01'), ('300668', '23.0'), ('300670', '17.34'), ('300705', '12.7'), ('300713', '24.05'), ('300736', '25.55'), ('300749', '31.13'), ('300760', '89.07'), ('600030', '15.38'), ('600053', '11.31'), ('600061', '6.96'), ('600107', '4.3'), ('600109', '5.97'), ('600137', '11.38'), ('600149', '4.35'), ('600155', '5.95'), ('600165', '3.2'), ('600172', '3.05'), ('600182', '15.72'), ('600191', '3.55'), ('600198', '5.04'), ('600212', '2.92'), ('600228', '5.51'), ('600234', '6.19'), ('600240', '2.81'), ('600255', '1.58'), ('600265', '20.29'), ('600289', '2.06'), ('600291', '10.28'), ('600301', '4.49'), ('600318', '6.03'), ('600355', '2.83'), ('600369', '2.99'), ('600385', '9.5'), ('600390', '6.78'), ('600397', '1.92'), ('600408', '2.87'), ('600493', '4.37'), ('600539', '5.54'), ('600558', '3.11'), ('600575', '1.93'), ('600599', '8.58'), ('600621', '6.74'), ('600634', '1.81'), ('600647', '9.8'), ('600652', '3.42'), ('600654', '1.8'), ('600678', '5.25'), ('600701', '1.67'), ('600725', '2.03'), ('600747', '1.18'), ('600754', '22.15'), ('600763', '44.88'), ('600766', '6.39'), ('600767', '3.73'), ('600768', '7.9'), ('600769', '3.61'), ('600807', '1.82'), ('600816', '4.25'), ('600837', '8.11'), ('600864', '3.14'), ('600867', '14.26'), ('600877', '3.6'), ('600883', '5.2'), ('600909', '4.25'), ('600958', '8.15'), ('600978', '3.54'), ('600999', '11.61'), ('601066', '6.83'), ('601099', '2.02'), ('601108', '6.93'), ('601198', '8.47'), ('601211', '13.94'), ('601375', '3.49'), ('601377', '4.02'), ('601555', '5.27'), ('601688', '14.52'), ('601788', '8.45'), ('601878', '5.99'), ('601881', '6.12'), ('601901', '4.8'), ('601990', '7.05'), ('603040', '26.14'), ('603088', '9.9'), ('603106', '10.53'), ('603183', '18.27'), ('603538', '15.99'), ('603657', '34.08'), ('603658', '52.22'), ('603718', '10.59'), ('603730', '16.2'), ('603880', '11.51'), ('603978', '20.46')]
   date = '20181022'
   date_next = '20181015'
   load_dir = '../../data/excels'
   compare_dir = '../../data/compare'

   hcdata.removeall(load_dir)
   code_list = download.download(code_pre_close_map, date, load_dir)
   df_list = hcdata.loaddata(load_dir, save=False)
   result = hitTopTest2.start_test_by_df(df_list)
#    if len(result) > 0:
#       hcdata.removeall(compare_dir)
#       download.download(result, date_next, compare_dir) 
#       compare_list = hcdata.loaddata(compare_dir, save=False)
#       if len(compare_list) > 0:
#          for res in result:
#              for df in compare_list:
#                  if df.iloc[0]['code'] == res[0]:
#                     avg = (df.iloc[0]['price'] + df.iloc[-1]['price'] + df['price'].min() + df['price'].max()) / 4
#                     print('[%s] buyed price=%s, next day: avg=%s, open=%s, close=%s, low=%s, high=%s' % (res[0], res[1], avg, df.iloc[0]['price'], df.iloc[-1]['price'], df['price'].min(), df['price'].max()))
#                     continue 
          
           





